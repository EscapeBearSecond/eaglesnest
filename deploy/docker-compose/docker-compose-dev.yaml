version: "3"

# 设置mysql，redis持久化保存
volumes:
  postgres:
  redis:

services:
  web:
    image: node:16
    container_name: cs-web
    hostname: cs-web #可以通过容器名访问
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      - server
    working_dir: /web # 如果docker 设置了workdir 则此处不需要设置
    #若网络不太好，请自行换源，如下
    command: >
      bash -c "yarn install && yarn serve"
    volumes:
      - ../../web:/web

  server:
    image: golang:1.22.2
    container_name: cs-server
    hostname: cs-server
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ../../server:/server
    working_dir: /server # 如果docker 设置了workdir 则此处不需要设置
    command: >
      bash -c "apt-get update
      && apt-get install -y libpcap-dev
      && git config --global credential.helper 'store --file=/root/.git-credentials'
      && echo 'http://zy:%23XWUT%2AKjkM6tqP@47.103.136.241' > /root/.git-credentials
      && go env -w GOPROXY=https://goproxy.cn,direct
      && go env -w GOPRIVATE=codeup.aliyun.com/66d825f8c06a2fdac7bbfe8c
      && go env -w GOINSECURE=codeup.aliyun.com/66d825f8c06a2fdac7bbfe8c
      && go mod tidy
      && GODEBUG=tlsrsakex=1 go run main.go"
    network_mode: host
    privileged: true # 启用扩展权限
    user: root # 以root用户运行

  postgres:
    image: postgres:13.3 # 使用PostgreSQL 13.3镜像
    container_name: cs-postgres
    hostname: cs-postgres
    restart: always
    ports:
      - "5432:5432" # host物理直接映射端口为15432
    environment:
      POSTGRES_DB: "postgres" # 初始化启动时要创建的数据库的名称，不设置空是为了避免新建一个和用户名同名的数据库，数据库初始化放到页面上
      POSTGRES_USER: "curescan" # 初始化启动时要创建的数据库的超级用户的用户名
      POSTGRES_PASSWORD: "H9nWDpM86K"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U curescan -d curescan"]
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - postgres:/var/lib/postgresql/data

  redis:
    image: redis:6.0.6
    container_name: cs-redis # 容器名
    hostname: cs-redis
    restart: always
    ports:
      - "6379:6379"
    environment:
      REDIS_PASSWORD: "ZtGf2B2T5b" # 设置Redis密码
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - redis:/data
